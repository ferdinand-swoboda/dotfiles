[user]
	email = ferdinand.swoboda@googlemail.com
	name = Ferdinand Swoboda
	signingkey = 4EECBA70B7F72969
[pull]
	rebase = true
[push]
	default = simple
	followTags = true
	autoSetupRemote = true
[color]
	# Enable colors in color-supporting terminals
	ui = auto
[alias]
  # View abbreviated SHA, description, diff stats and history graph of the latest 20 commits.
	l = log --stat --graph --decorate --pretty=medium -n 20 --abbrev-commit

	# View the current working tree status using the short format.
  s = status -s

  # Show the diff between the latest commit and the current state.
  d = !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"

  # `git di $number` shows the diff between the state `$number` revisions ago and the current state.
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  # Commit all changes.
  ca = !git add -A && git commit -av

  # Switch to a branch, creating it if necessary.
  go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch --all
  remotes = remote --verbose

  # List aliases.
  aliases = config --get-regexp alias

  # Amend the currently staged files to the latest commit.
  amend = commit --amend --reuse-message=HEAD

  # Credit an author on the latest commit.
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # Interactive rebase with the given number of latest commits.
  reb = "!r() { git rebase -i HEAD~$1; }; r"

  # Remove the old tag with this name and tag the latest commit with it.
  retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"

  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"

  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  # Remove branches that have already been merged with main.
  # a.k.a. ‘delete merged’
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # List contributors with number of commits.
  contributors = shortlog --summary --numbered

  # Show the user email for the current repository.
  whoami = config user.email
[apply]
	# Detect whitespace errors when applying a patch.
	whitespace = fix
[branch]
	# Show most recently changed branches first.
	sort = -committerdate
[core]
	# Don't consider trailing space change as a cause for merge conflicts
	whitespace = -trailing-space

	editor = nano
	autocrlf = input
	hooksPath = ~/.config/git/hooks
	pager = delta

	# Make `git rebase` safer on macOS.
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

  # Prevent showing files whose names contain non-ASCII symbols as unversioned.
  # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
  precomposeunicode = false

  # Speed up commands involving untracked files such as `git status`.
  # https://git-scm.com/docs/git-update-index#_untracked_cache
  untrackedCache = true
[diff]
	# Detect copies as well as renames.
	renames = copies
[diff "bin"]
	# Use `hexdump` to diff binary files.
	textconv = hexdump -v -C
[submodule]
	recurse = true
[interactive]
	diffFilter = delta --color-only
[delta]
	features = side-by-side line-numbers decorations
	whitespace-error-style = 22 reverse
[status]
	# Display submodule rev change summaries in status
	submoduleSummary = true
[tag]
	# Sort tags as version numbers whenever applicable, so 1.10.2 is AFTER 1.2.0.
	sort = version:refname
[log]
	decorate = full
[rebase]
	autoSquash = true
[merge]
	conflictstyle = diff3

  # Include summaries of merged commits in newly created merge commit messages
  log = true
[stash]
	showPatch = true
[transfer]
	fsckobjects = false
[gpg]
	program = /opt/homebrew/bin/gpg
[commit]
  # https://help.github.com/articles/signing-commits-using-gpg/
	gpgsign = true
[fetch]
	prune = true
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[credential]
	helper = osxkeychain
